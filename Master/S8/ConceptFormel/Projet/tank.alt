const nbValvesUphill = 2;
const nbSensors = 4; // nbLevels - 1
const nbLevels = 5;

node Valve
	state
		rate : [0, 2] : public;
		broken : bool : public;
	event inc, dec;
	init
		rate := 0;
		broken := false;
	trans
		not broken & rate < 2 |- inc -> rate := rate + 1;
		not broken & rate > 0 |- dec -> rate := rate - 1;
		not broken & rate = 2 |- inc -> ;
		not broken & rate = 0 |- dec -> ;
		not broken |- inc -> broken := true;
		not broken |- dec -> broken := true;
		broken |- inc -> ;
		broken |- dec -> ;
	assert
		broken = false;
edon

node Tank
	state
		level : [0, nbLevels - 1] : public;
	init
		level := 2;
	flow
		uphill : [0, 4];
		downstream : [0, 2];
	event sense;
	trans
		(uphill > downstream) |- sense -> level := level + 1;
		(uphill > downstream) & (level = nbSensors) |- sense -> ; //anti-blocage
		(uphill < downstream) |- sense -> level := level - 1;
		(uphill < downstream) & (level = 0) |- sense -> ; //anti-blocage
		((uphill = downstream) & (downstream != 0)) |- sense -> level := level + 1;
		((uphill = downstream) & (downstream != 0)) |- sense -> level := level - 1;
		((uphill = downstream) & (downstream != 0)) |- sense -> ;
		((uphill = downstream) & (downstream = 0)) |- sense -> ;
edon

node Ctrl
	flow
		/* Observations du controleur
		*  Les dÃ©bits des vannes
		*  Le niveau dans la cuve
		*/
		rate : [0,2][3];
		level : [0,nbSensors];
	event
		/* 27 commandes possibles
		*  codage : "d" pour dec, "i" pour inc, "n" pour nop
		*/
		ddd, ddi, ddn, did, dii, din, dnd, dni, dnn,
		idd, idi, idn, iid, iii, iin, ind, ini, inn,
		ndd, ndi, ndn, nid, nii, nin, nnd, nni, nnn;
	trans
		true |- ddd, ddi, ddn, did, dii, din, dnd, dni, dnn,
			idd, idi, idn, iid, iii, iin, ind, ini, inn,
			ndd, ndi, ndn, nid, nii, nin, nnd, nni, nnn
			-> ;
edon

node SystemV0
	sub
		T : Tank;
		C : Ctrl;
		Vup : Valve[nbValvesUphill];
		Vdo : Valve;
	assert
		/* Les canalisations */
		T.uphill = (Vup[0].rate + Vup[1].rate);
		T.downstream = Vdo.rate;
		/* L'observation du controleur */
		C.rate[0] = Vup[0].rate;
		C.rate[1] = Vup[1].rate;
		C.rate[2] = Vdo.rate;
		C.level = T.level;
	state
		ctrl : bool;
	init
		ctrl = true;
	event
		cmd, env;
	trans
		ctrl |- cmd -> ctrl := ~ctrl;
		~ctrl |- env -> ctrl := ~ctrl;
	sync
		<env, T.sense>;
		// les commandes
		// x3
		<C.ddd, cmd, Vup[0].dec, Vup[1].dec, Vdo.dec>;
		<C.ddi, cmd, Vup[0].dec, Vup[1].dec, Vdo.inc>;
		<C.did, cmd, Vup[0].dec, Vup[1].inc, Vdo.dec>;
		<C.dii, cmd, Vup[0].dec, Vup[1].inc, Vdo.inc>;
		<C.idd, cmd, Vup[0].inc, Vup[1].dec, Vdo.dec>;
		<C.idi, cmd, Vup[0].inc, Vup[1].dec, Vdo.inc>;
		<C.iid, cmd, Vup[0].inc, Vup[1].inc, Vdo.dec>;
		<C.iii, cmd, Vup[0].inc, Vup[1].inc, Vdo.inc>;
		// x2
		<C.ddn, cmd, Vup[0].dec, Vup[1].dec>;
		<C.din, cmd, Vup[0].dec, Vup[1].inc>;
		<C.idn, cmd, Vup[0].inc, Vup[1].dec>;
		<C.iin, cmd, Vup[0].inc, Vup[1].inc>;
//
		<C.dnd, cmd, Vup[0].dec, Vdo.dec>;
		<C.dni, cmd, Vup[0].dec, Vdo.inc>;
		<C.ind, cmd, Vup[0].inc, Vdo.dec>;
		<C.ini, cmd, Vup[0].inc, Vdo.inc>;
//
		<C.ndd, cmd, Vup[1].dec, Vdo.dec>;
		<C.ndi, cmd, Vup[1].dec, Vdo.inc>;
		<C.nid, cmd, Vup[1].inc, Vdo.dec>;
		<C.nii, cmd, Vup[1].inc, Vdo.inc>;
//
		<C.dnn, cmd, Vup[0].dec>;
		<C.ndn, cmd, Vup[1].dec>;
		<C.nnd, cmd, Vdo.dec>;
		<C.inn, cmd, Vup[0].inc>;
		<C.nin, cmd, Vup[1].inc>;
		<C.nni, cmd, Vdo.inc>;
		<C.nnn, cmd>;
edon

node SystemV1
	sub
		T : Tank;
		C : CtrlUn;
		Vup : Valve[nbValvesUphill];
		Vdo : Valve;
	assert
		/* Les canalisations */
		T.uphill = (Vup[0].rate + Vup[1].rate);
		T.downstream = Vdo.rate;
		/* L'observation du controleur */
		C.rate[0] = Vup[0].rate;
		C.rate[1] = Vup[1].rate;
		C.rate[2] = Vdo.rate;
		C.level = T.level;
	state
		ctrl : bool;
	init
		ctrl = true;
	event
		cmd, env;
	trans
		ctrl |- cmd -> ctrl := ~ctrl;
		~ctrl |- env -> ctrl := ~ctrl;
	sync
		<env, T.sense>;
		// les commandes
		// x3
		<C.ddd, cmd, Vup[0].dec, Vup[1].dec, Vdo.dec>;
		<C.ddi, cmd, Vup[0].dec, Vup[1].dec, Vdo.inc>;
		<C.did, cmd, Vup[0].dec, Vup[1].inc, Vdo.dec>;
		<C.dii, cmd, Vup[0].dec, Vup[1].inc, Vdo.inc>;
		<C.idd, cmd, Vup[0].inc, Vup[1].dec, Vdo.dec>;
		<C.idi, cmd, Vup[0].inc, Vup[1].dec, Vdo.inc>;
		<C.iid, cmd, Vup[0].inc, Vup[1].inc, Vdo.dec>;
		<C.iii, cmd, Vup[0].inc, Vup[1].inc, Vdo.inc>;
		// x2
		<C.ddn, cmd, Vup[0].dec, Vup[1].dec>;
		<C.din, cmd, Vup[0].dec, Vup[1].inc>;
		<C.idn, cmd, Vup[0].inc, Vup[1].dec>;
		<C.iin, cmd, Vup[0].inc, Vup[1].inc>;
//
		<C.dnd, cmd, Vup[0].dec, Vdo.dec>;
		<C.dni, cmd, Vup[0].dec, Vdo.inc>;
		<C.ind, cmd, Vup[0].inc, Vdo.dec>;
		<C.ini, cmd, Vup[0].inc, Vdo.inc>;
//
		<C.ndd, cmd, Vup[1].dec, Vdo.dec>;
		<C.ndi, cmd, Vup[1].dec, Vdo.inc>;
		<C.nid, cmd, Vup[1].inc, Vdo.dec>;
		<C.nii, cmd, Vup[1].inc, Vdo.inc>;
//
		<C.dnn, cmd, Vup[0].dec>;
		<C.ndn, cmd, Vup[1].dec>;
		<C.nnd, cmd, Vdo.dec>;
		<C.inn, cmd, Vup[0].inc>;
		<C.nin, cmd, Vup[1].inc>;
		<C.nni, cmd, Vdo.inc>;
		<C.nnn, cmd>;
edon
