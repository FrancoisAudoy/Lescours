with Building do
     //Propriétés générales
     deadlock := any_s - src(any_t - self_epsilon);
     notResetable := any_s - coreach(initial,any_t);

     /* P une propriété de sûreté
     * 	Ecrire P : if "A" then "B"
     * 	Calculer les contres exemples, 3 façons
     * 	notP := A - B;
     * 	not P := A & notB;
     *	notP := notB - notA;
     */

     /*	P1 : When a button is push, it lights
     	P1 := if "" then "";
	*/
     A := label F[0].B.push; //Appuie sur le bouton au Floor[]
     B := [F[0].B.light]; //Configuration où F[0].B est allumé
     notP1 := ((tgt(label F[0].B.push) - [F[0].B.light]) |
     	       (tgt(label F[1].B.push) - [F[1].B.light]) |
	       (tgt(label F[2].B.push) - [F[2].B.light]) |
	       (tgt(label F[3].B.push) - [F[3].B.light]) |
	       (tgt(label L.B[0].push) - [L.B[0].light]) |
	       (tgt(label L.B[1].push) - [L.B[1].light]) |
	       (tgt(label L.B[2].push) - [L.B[2].light]) |
	       (tgt(label L.B[3].push) - [L.B[3].light]));

     /* P2 : When the corresponding service is done, it light off
     * P2 : if "a service is done" then "the corresponding button lights off"
     */

     notP2 := any_s &
     ((tgt(label F[0].close) & [request[0]])|
     (tgt(label F[1].close) & [request[1]])|
     (tgt(label F[2].close) & [request[2]])|
     (tgt(label F[3].close) & [request[3]]));

     /* P3 : At each floor, the door is close if the lift is not here
     *	P3 : if "lift not at level i " then "door at floor i is close"
     */

     notP3 := any_s &
     (([L.level != 0] - [F[0].D.closed]) |
     ([L.level != 1] - [F[1].D.closed])  |
     ([L.level != 2] - [F[2].D.closed])  |
     ([L.level != 3] - [F[3].D.closed]));

     /*P5 The software opens the door at come floor only if there is some requests for that floor
     P5 : if "no request at level i " then " the door at level i still close"
     */

     notP5 := any_s & ((src(label open[0]) - [request[0]]) |
     	       (src(label open[1]) - [request[1]]) |
	       (src(label open[2]) - [request[2]]) |
	       (src(label open[3]) - [request[3]]));

    /* P6 if there is no request, the lift must stay at the same floor
    * P6: if "there is no request" then "the lift must stay"
    */

    notP6 := any_s &
    src(label up | label down) -
    [request[0] | request[1] | request[2] | request[3]];


    /* P7 When the lift moves, it must stop where there is a request
    * P7 if "there is one or more request" then "the lift had to stop at only at those floor(s)"
    */

    notP7 := any_s &
    	  src(label up | label down) &
	  ([request[0] & L.level=0] |
	   [request[1] & L.level=1] |
	   [request[2] & L.level=2] |
	   [request[3] & L.level=3] );


/* p8 When there are several requests, the software must (if necessary)
*continu in the same direction than its last move
* P8 : if "the lift move, and there is several request "
       then " the lift must continue in the same way than its last move"
*/

notP8 := any_s &
      (reach(tgt(label up), any_t - (label up | label down)) |
      reach(tgt(label down), any_t - (label up | label down)))
      & src(label up)
      & src(label down);

done